problem copy kari ne upload kar.


A

def solve():
    n, k = map(int, input().split())

    if k == 1:
        print(n)
    else:
        ans = 0
        ans += n
        ans += (n - 1) * (k - 1)
        
        print(ans)


t = int(input(""))
for _ in range(t):
    solve()



E


from collections import defaultdict

def count_right_angle_triangles(n, points):
    x_count = defaultdict(int)
    y_count = defaultdict(int)
    
    for x, y in points:
        x_count[x] += 1
        y_count[y] += 1
    
    triangles = 0
    for x, y in points:
        triangles += (x_count[x] - 1) * (y_count[y] - 1)
    
    return triangles

n = int(input())
points = [tuple(map(int, input().split())) for _ in range(n)]

print(count_right_angle_triangles(n, points))






B


def classify_digits(t, test_cases):
    results = []
    for a, b, c in test_cases:
        if a < b < c:
            results.append("STAIR")
        elif a < b > c:
            results.append("PEAK")
        else:
            results.append("NONE")
    return results

t = int(input())
test_cases = [tuple(map(int, input().split())) for _ in range(t)]

results = classify_digits(t, test_cases)
for result in results:
    print(result)


D


def minimum_square_magnitude(t, test_cases):
    results = []
    for vectors, m in test_cases:
        x_sum = sum(v[0] for v in vectors)
        y_sum = sum(v[1] for v in vectors)
        
        if x_sum >= 0:
            x_adjustment = max(-x_sum, -m)
        else:
            x_adjustment = min(-x_sum, m)
        
        if y_sum >= 0:
            y_adjustment = max(-y_sum, -m)
        else:
            y_adjustment = min(-y_sum, m)
        
        x_res = x_sum + x_adjustment
        y_res = y_sum + y_adjustment
        results.append(x_res**2 + y_res**2)
    
    return results

t = int(input())
test_cases = []

for _ in range(t):
    vectors = [tuple(map(int, input().split())) for _ in range(3)]
    m = int(input())
    test_cases.append((vectors, m))

results = minimum_square_magnitude(t, test_cases)
print("\n".join(map(str, results)))

C

from math import gcd
from functools import reduce

def find_largest_subarray(n, arr):
    if reduce(gcd, arr) != 1:
        return -1
    return n

n = int(input())
arr = list(map(int, input().split()))
print(find_largest_subarray(n, arr))


F


from math import gcd

def pile_of_stones(test_cases):
    results = []
    for a, b in test_cases:
        results.append(gcd(a, b))
    return results


t = int(input())
test_cases = [tuple(map(int, input().split())) for _ in range(t)]


results = pile_of_stones(test_cases)
print("\n".join(map(str, results)))



H

def flip_cups(n, cups):
    count_D = cups.count('D')
    if count_D % 4 == 0:
        steps = count_D // 4
        return f":) {steps}"
    else:
        return ":("

n = int(input())
cups = input().split()

print(flip_cups(n, cups))



